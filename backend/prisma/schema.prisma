generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiYzYxZjJmYjAtNmU1NS00ZjIzLWI4YmQtOTQ5YzgyZDU0OGZhIiwidGVuYW50X2lkIjoiZWFlYzFkOGU1ZWU4MTRkMGNhZjUwZmUxNDQ2MDY5MDc1NTUxYTg1ZTMwMzFmMzVhOWZiZmFlZGMwZjJjNzY5NyIsImludGVybmFsX3NlY3JldCI6IjkwMzVhZjYwLTNhMTItNDE5Mi1hZGQ3LTUwZGY5ODIzOGVjMyJ9.cFB8UVGf8FBmAUrZ9Czu70YlHQPqKl6uGlK0ZGM31cw"
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String?
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  clerkId    String?     @unique
  employees  Employee[]
  teams      Team[]
  meetings   Meeting[]    @relation("ManagerMeetings")
  googleAccessToken   String?
  googleRefreshToken  String?
  googleTokenExpiry   DateTime?
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String
  department String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     Int
  employees  Employee[]
  user       User       @relation(fields: [userId], references: [id])
}

model Employee {
  id        Int       @id @default(autoincrement())
  name      String
  title     String
  email     String    @unique
  teamId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  startDate DateTime?
  country   String?
  team      Team      @relation(fields: [teamId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  meetings  Meeting[] @relation("EmployeeMeetings")
}

model Meeting {
  id                    Int               @id @default(autoincrement())
  title                 String?
  scheduledTime         DateTime
  durationMinutes       Int?
  platform              String?
  audioFileUrl          String?
  meetingUrl            String?
  googleCalendarEventId String?
  status                String            @default("SCHEDULED")
  managerId             Int
  employeeId            Int
  meetingBaasId         String?           @unique
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  manager               User              @relation("ManagerMeetings", fields: [managerId], references: [id])
  employee              Employee          @relation("EmployeeMeetings", fields: [employeeId], references: [id])
  transcript            Transcript?
  insights              MeetingInsight[]

  @@index([managerId])
  @@index([employeeId])
}

model Transcript {
  id           Int      @id @default(autoincrement())
  meetingId    Int      @unique
  content      String   @db.Text
  languageCode String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  meeting      Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model MeetingInsight {
  id             Int      @id @default(autoincrement())
  meetingId      Int
  type           String
  content        String
  relevanceScore Float?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  meeting        Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId])
}
